Copyright 2021~ PeTrA. All rights reserved.
Backup data.

-------------- 20210116
    # result, unans = traceroute(["github.com"], maxttl = 20, verbose = 0)

    # result.show()
    # print(result.show())
    # result.summary()
    # r = result.show()
    # result.show()

    target = "52.78.231.108"
    max_ttl = 40
    destination_port = 32323
    verbose_value = 0
    timeout_value = 3

    for i in range(1, max_ttl):
        print(i, " count..")
        # send_packet = IP(dst = target, ttl = i) / UDP(dport = destination_port)
        send_packet = IP(dst=target, ttl=i) / ICMP()
        response_packet = sr1(send_packet, verbose = verbose_value, timeout = timeout_value)

        if response_packet is not None:
            if response_packet.type == 0: # icmp echo reply
                print("finish !! " + response_packet.getlayer(IP).src)
                break
            else:
                print(response_packet.getlayer(IP).src)
        """
        if response_packet is None:
            break
        elif response_packet.type == 3:
            break
        else:
            print(i)
        """
-------------- 20210116

-------------- 20210130
   def probe_traceroute(self, _traceroute_target_protocol_address, _traceroute_max_ttl,
                         _traceroute_verbose, _traceroute_timeout):
        protocol_address_list = collections.deque()
        for current_ttl_value in range(1, _traceroute_max_ttl):
            # print(current_ttl_value, " hop..")
            total_node_count = total_node_count + 1
            send_packet = IP(dst = _traceroute_target_protocol_address, ttl = current_ttl_value) / ICMP()
            response_packet = sr1(send_packet, verbose = _traceroute_verbose, timeout = _traceroute_timeout)

            if response_packet is not None:
                if response_packet.type == 0:  # icmp echo reply
                    # print("finish !! " + response_packet.getlayer(IP).src)
                    protocol_address_list.append(response_packet.getlayer(IP).src)
                    break
                else:
                    # print(response_packet.getlayer(IP).src)
                    protocol_address_list.append(response_packet.getlayer(IP).src)


        # traceroute result check area
        # print("result_total_node_count = ", total_node_count)
        # print("result_protocol_address_list", protocol_address_list)

        return total_node_count, protocol_address_list
-------------- 20210130

-------------- 20210130
            elif HIVE_MAIN_COMMAND == "traceroute":
                while True:
                    HIVE_TRACEROUTE_COMMAND = self.get_command("traceroute")
                    if HIVE_TRACEROUTE_COMMAND == "?":
                        self.print_traceroute_option()
                        continue
                    elif HIVE_TRACEROUTE_COMMAND == "":
                        continue
                    elif HIVE_TRACEROUTE_COMMAND == "quit":
                        break
                    else: # something is put.
                        is_ip_address = is_protocol_address(HIVE_TRACEROUTE_COMMAND)
                        if is_ip_address == 0: # not ip address
                            self.print_ip_error()
                            continue
                        ###########################################################################
                        # here, traceroute function is needed.                                    #
                        #                                                                         #
                        ###########################################################################
                        continue
                    continue
                continue
-------------- 20210130